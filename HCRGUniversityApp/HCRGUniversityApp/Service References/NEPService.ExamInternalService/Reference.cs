//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRGUniversityApp.NEPService.ExamInternalService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreTestResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class PreTestResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MEID {
            get {
                return this.MEIDField;
            }
            set {
                if ((this.MEIDField.Equals(value) != true)) {
                    this.MEIDField = value;
                    this.RaisePropertyChanged("MEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestID {
            get {
                return this.PreTestIDField;
            }
            set {
                if ((this.PreTestIDField.Equals(value) != true)) {
                    this.PreTestIDField = value;
                    this.RaisePropertyChanged("PreTestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestResultID {
            get {
                return this.PreTestResultIDField;
            }
            set {
                if ((this.PreTestResultIDField.Equals(value) != true)) {
                    this.PreTestResultIDField = value;
                    this.RaisePropertyChanged("PreTestResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreTestQuestionResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class PreTestQuestionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> PreTestAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestQuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestQuestionResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestResultIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestAnswer {
            get {
                return this.PreTestAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestAnswerField, value) != true)) {
                    this.PreTestAnswerField = value;
                    this.RaisePropertyChanged("PreTestAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> PreTestAnswerTrueFalse {
            get {
                return this.PreTestAnswerTrueFalseField;
            }
            set {
                if ((this.PreTestAnswerTrueFalseField.Equals(value) != true)) {
                    this.PreTestAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("PreTestAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestQuestionID {
            get {
                return this.PreTestQuestionIDField;
            }
            set {
                if ((this.PreTestQuestionIDField.Equals(value) != true)) {
                    this.PreTestQuestionIDField = value;
                    this.RaisePropertyChanged("PreTestQuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestQuestionResultID {
            get {
                return this.PreTestQuestionResultIDField;
            }
            set {
                if ((this.PreTestQuestionResultIDField.Equals(value) != true)) {
                    this.PreTestQuestionResultIDField = value;
                    this.RaisePropertyChanged("PreTestQuestionResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestResultID {
            get {
                return this.PreTestResultIDField;
            }
            set {
                if ((this.PreTestResultIDField.Equals(value) != true)) {
                    this.PreTestResultIDField = value;
                    this.RaisePropertyChanged("PreTestResultID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class ExamResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamResultID {
            get {
                return this.ExamResultIDField;
            }
            set {
                if ((this.ExamResultIDField.Equals(value) != true)) {
                    this.ExamResultIDField = value;
                    this.RaisePropertyChanged("ExamResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MEID {
            get {
                return this.MEIDField;
            }
            set {
                if ((this.MEIDField.Equals(value) != true)) {
                    this.MEIDField = value;
                    this.RaisePropertyChanged("MEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamQuestionResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class ExamQuestionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExamAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamQuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamQuestionResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamResultIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamAnswer {
            get {
                return this.ExamAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamAnswerField, value) != true)) {
                    this.ExamAnswerField = value;
                    this.RaisePropertyChanged("ExamAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ExamAnswerTrueFalse {
            get {
                return this.ExamAnswerTrueFalseField;
            }
            set {
                if ((this.ExamAnswerTrueFalseField.Equals(value) != true)) {
                    this.ExamAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("ExamAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamQuestionID {
            get {
                return this.ExamQuestionIDField;
            }
            set {
                if ((this.ExamQuestionIDField.Equals(value) != true)) {
                    this.ExamQuestionIDField = value;
                    this.RaisePropertyChanged("ExamQuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamQuestionResultID {
            get {
                return this.ExamQuestionResultIDField;
            }
            set {
                if ((this.ExamQuestionResultIDField.Equals(value) != true)) {
                    this.ExamQuestionResultIDField = value;
                    this.RaisePropertyChanged("ExamQuestionResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamResultID {
            get {
                return this.ExamResultIDField;
            }
            set {
                if ((this.ExamResultIDField.Equals(value) != true)) {
                    this.ExamResultIDField = value;
                    this.RaisePropertyChanged("ExamResultID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvaluationResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EvaluationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuggestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationID {
            get {
                return this.EvaluationIDField;
            }
            set {
                if ((this.EvaluationIDField.Equals(value) != true)) {
                    this.EvaluationIDField = value;
                    this.RaisePropertyChanged("EvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationResultID {
            get {
                return this.EvaluationResultIDField;
            }
            set {
                if ((this.EvaluationResultIDField.Equals(value) != true)) {
                    this.EvaluationResultIDField = value;
                    this.RaisePropertyChanged("EvaluationResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPass {
            get {
                return this.IsPassField;
            }
            set {
                if ((this.IsPassField.Equals(value) != true)) {
                    this.IsPassField = value;
                    this.RaisePropertyChanged("IsPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MEID {
            get {
                return this.MEIDField;
            }
            set {
                if ((this.MEIDField.Equals(value) != true)) {
                    this.MEIDField = value;
                    this.RaisePropertyChanged("MEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suggestions {
            get {
                return this.SuggestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SuggestionsField, value) != true)) {
                    this.SuggestionsField = value;
                    this.RaisePropertyChanged("Suggestions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvaluationQuestionResult", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EvaluationQuestionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationAnswerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationQuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationQuestionResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationResultIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationAnswerID {
            get {
                return this.EvaluationAnswerIDField;
            }
            set {
                if ((this.EvaluationAnswerIDField.Equals(value) != true)) {
                    this.EvaluationAnswerIDField = value;
                    this.RaisePropertyChanged("EvaluationAnswerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationQuestionID {
            get {
                return this.EvaluationQuestionIDField;
            }
            set {
                if ((this.EvaluationQuestionIDField.Equals(value) != true)) {
                    this.EvaluationQuestionIDField = value;
                    this.RaisePropertyChanged("EvaluationQuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationQuestionResultID {
            get {
                return this.EvaluationQuestionResultIDField;
            }
            set {
                if ((this.EvaluationQuestionResultIDField.Equals(value) != true)) {
                    this.EvaluationQuestionResultIDField = value;
                    this.RaisePropertyChanged("EvaluationQuestionResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationResultID {
            get {
                return this.EvaluationResultIDField;
            }
            set {
                if ((this.EvaluationResultIDField.Equals(value) != true)) {
                    this.EvaluationResultIDField = value;
                    this.RaisePropertyChanged("EvaluationResultID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvaluationAnswer", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EvaluationAnswer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EvaluationAnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationAnswerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvaluationAns {
            get {
                return this.EvaluationAnsField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationAnsField, value) != true)) {
                    this.EvaluationAnsField = value;
                    this.RaisePropertyChanged("EvaluationAns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationAnswerID {
            get {
                return this.EvaluationAnswerIDField;
            }
            set {
                if ((this.EvaluationAnswerIDField.Equals(value) != true)) {
                    this.EvaluationAnswerIDField = value;
                    this.RaisePropertyChanged("EvaluationAnswerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NEPService.ExamInternalService.IExamInternalService")]
    public interface IExamInternalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddPreTestResult", ReplyAction="http://tempuri.org/IExamInternalService/AddPreTestResultResponse")]
        int AddPreTestResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddPreTestResult", ReplyAction="http://tempuri.org/IExamInternalService/AddPreTestResultResponse")]
        System.Threading.Tasks.Task<int> AddPreTestResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestResultResponse")]
        int UpdatePreTestResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestResultResponse")]
        System.Threading.Tasks.Task<int> UpdatePreTestResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestResultIsPassResponse")]
        void UpdatePreTestResultIsPass(int preTestResultID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestResultIsPassResponse")]
        System.Threading.Tasks.Task UpdatePreTestResultIsPassAsync(int preTestResultID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetPreTestAttemptByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetPreTestAttemptByUserResponse")]
        int GetPreTestAttemptByUser(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetPreTestAttemptByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetPreTestAttemptByUserResponse")]
        System.Threading.Tasks.Task<int> GetPreTestAttemptByUserAsync(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddPreTestQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddPreTestQuestionResultsResponse")]
        int AddPreTestQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddPreTestQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddPreTestQuestionResultsResponse")]
        System.Threading.Tasks.Task<int> AddPreTestQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestQuestionResultResponse")]
        int UpdatePreTestQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdatePreTestQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdatePreTestQuestionResultResponse")]
        System.Threading.Tasks.Task<int> UpdatePreTestQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddExamResult", ReplyAction="http://tempuri.org/IExamInternalService/AddExamResultResponse")]
        int AddExamResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddExamResult", ReplyAction="http://tempuri.org/IExamInternalService/AddExamResultResponse")]
        System.Threading.Tasks.Task<int> AddExamResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamResultResponse")]
        int UpdateExamResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamResultResponse")]
        System.Threading.Tasks.Task<int> UpdateExamResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamResultIsPassResponse")]
        void UpdateExamResultIsPass(int examResultID, int MEID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamResultIsPassResponse")]
        System.Threading.Tasks.Task UpdateExamResultIsPassAsync(int examResultID, int MEID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetExamAttempResulttByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetExamAttempResulttByUserResponse")]
        HCRGUniversityApp.NEPService.ExamInternalService.ExamResult[] GetExamAttempResulttByUser(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetExamAttempResulttByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetExamAttempResulttByUserResponse")]
        System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.ExamResult[]> GetExamAttempResulttByUserAsync(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddExamQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddExamQuestionResultsResponse")]
        int AddExamQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddExamQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddExamQuestionResultsResponse")]
        System.Threading.Tasks.Task<int> AddExamQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamQuestionResultResponse")]
        int UpdateExamQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateExamQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateExamQuestionResultResponse")]
        System.Threading.Tasks.Task<int> UpdateExamQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddEvaluationResult", ReplyAction="http://tempuri.org/IExamInternalService/AddEvaluationResultResponse")]
        int AddEvaluationResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult evaluationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddEvaluationResult", ReplyAction="http://tempuri.org/IExamInternalService/AddEvaluationResultResponse")]
        System.Threading.Tasks.Task<int> AddEvaluationResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult evaluationResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationResultResponse")]
        int UpdateEvaluationResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationResultResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult examResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationResultIsPassResponse")]
        void UpdateEvaluationResultIsPass(int evaluationResultID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationResultIsPass", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationResultIsPassResponse")]
        System.Threading.Tasks.Task UpdateEvaluationResultIsPassAsync(int evaluationResultID, bool isPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserResponse")]
        int GetEvaluationAttemptByUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUser", ReplyAction="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserResponse")]
        System.Threading.Tasks.Task<int> GetEvaluationAttemptByUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserAndMEID", ReplyAction="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserAndMEIDResponse" +
            "")]
        HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult GetEvaluationAttemptByUserAndMEID(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserAndMEID", ReplyAction="http://tempuri.org/IExamInternalService/GetEvaluationAttemptByUserAndMEIDResponse" +
            "")]
        System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult> GetEvaluationAttemptByUserAndMEIDAsync(int userID, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddEvaluationQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddEvaluationQuestionResultsResponse")]
        int AddEvaluationQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/AddEvaluationQuestionResults", ReplyAction="http://tempuri.org/IExamInternalService/AddEvaluationQuestionResultsResponse")]
        System.Threading.Tasks.Task<int> AddEvaluationQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationQuestionResultResponse")]
        int UpdateEvaluationQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/UpdateEvaluationQuestionResult", ReplyAction="http://tempuri.org/IExamInternalService/UpdateEvaluationQuestionResultResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetAllEvaluationAnswer", ReplyAction="http://tempuri.org/IExamInternalService/GetAllEvaluationAnswerResponse")]
        HCRGUniversityApp.NEPService.ExamInternalService.EvaluationAnswer[] GetAllEvaluationAnswer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamInternalService/GetAllEvaluationAnswer", ReplyAction="http://tempuri.org/IExamInternalService/GetAllEvaluationAnswerResponse")]
        System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.EvaluationAnswer[]> GetAllEvaluationAnswerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExamInternalServiceChannel : HCRGUniversityApp.NEPService.ExamInternalService.IExamInternalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExamInternalServiceClient : System.ServiceModel.ClientBase<HCRGUniversityApp.NEPService.ExamInternalService.IExamInternalService>, HCRGUniversityApp.NEPService.ExamInternalService.IExamInternalService {
        
        public ExamInternalServiceClient() {
        }
        
        public ExamInternalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExamInternalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExamInternalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExamInternalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddPreTestResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult) {
            return base.Channel.AddPreTestResult(preTestResult);
        }
        
        public System.Threading.Tasks.Task<int> AddPreTestResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult) {
            return base.Channel.AddPreTestResultAsync(preTestResult);
        }
        
        public int UpdatePreTestResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult) {
            return base.Channel.UpdatePreTestResult(preTestResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePreTestResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestResult preTestResult) {
            return base.Channel.UpdatePreTestResultAsync(preTestResult);
        }
        
        public void UpdatePreTestResultIsPass(int preTestResultID, bool isPass) {
            base.Channel.UpdatePreTestResultIsPass(preTestResultID, isPass);
        }
        
        public System.Threading.Tasks.Task UpdatePreTestResultIsPassAsync(int preTestResultID, bool isPass) {
            return base.Channel.UpdatePreTestResultIsPassAsync(preTestResultID, isPass);
        }
        
        public int GetPreTestAttemptByUser(int userID, int MEID) {
            return base.Channel.GetPreTestAttemptByUser(userID, MEID);
        }
        
        public System.Threading.Tasks.Task<int> GetPreTestAttemptByUserAsync(int userID, int MEID) {
            return base.Channel.GetPreTestAttemptByUserAsync(userID, MEID);
        }
        
        public int AddPreTestQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult) {
            return base.Channel.AddPreTestQuestionResults(preTestQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> AddPreTestQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult) {
            return base.Channel.AddPreTestQuestionResultsAsync(preTestQuestionResult);
        }
        
        public int UpdatePreTestQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult) {
            return base.Channel.UpdatePreTestQuestionResult(preTestQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePreTestQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.PreTestQuestionResult preTestQuestionResult) {
            return base.Channel.UpdatePreTestQuestionResultAsync(preTestQuestionResult);
        }
        
        public int AddExamResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult) {
            return base.Channel.AddExamResult(examResult);
        }
        
        public System.Threading.Tasks.Task<int> AddExamResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult) {
            return base.Channel.AddExamResultAsync(examResult);
        }
        
        public int UpdateExamResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult) {
            return base.Channel.UpdateExamResult(examResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdateExamResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamResult examResult) {
            return base.Channel.UpdateExamResultAsync(examResult);
        }
        
        public void UpdateExamResultIsPass(int examResultID, int MEID, bool isPass) {
            base.Channel.UpdateExamResultIsPass(examResultID, MEID, isPass);
        }
        
        public System.Threading.Tasks.Task UpdateExamResultIsPassAsync(int examResultID, int MEID, bool isPass) {
            return base.Channel.UpdateExamResultIsPassAsync(examResultID, MEID, isPass);
        }
        
        public HCRGUniversityApp.NEPService.ExamInternalService.ExamResult[] GetExamAttempResulttByUser(int userID, int MEID) {
            return base.Channel.GetExamAttempResulttByUser(userID, MEID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.ExamResult[]> GetExamAttempResulttByUserAsync(int userID, int MEID) {
            return base.Channel.GetExamAttempResulttByUserAsync(userID, MEID);
        }
        
        public int AddExamQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult) {
            return base.Channel.AddExamQuestionResults(examQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> AddExamQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult) {
            return base.Channel.AddExamQuestionResultsAsync(examQuestionResult);
        }
        
        public int UpdateExamQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult) {
            return base.Channel.UpdateExamQuestionResult(examQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdateExamQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.ExamQuestionResult examQuestionResult) {
            return base.Channel.UpdateExamQuestionResultAsync(examQuestionResult);
        }
        
        public int AddEvaluationResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult evaluationResult) {
            return base.Channel.AddEvaluationResult(evaluationResult);
        }
        
        public System.Threading.Tasks.Task<int> AddEvaluationResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult evaluationResult) {
            return base.Channel.AddEvaluationResultAsync(evaluationResult);
        }
        
        public int UpdateEvaluationResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult examResult) {
            return base.Channel.UpdateEvaluationResult(examResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult examResult) {
            return base.Channel.UpdateEvaluationResultAsync(examResult);
        }
        
        public void UpdateEvaluationResultIsPass(int evaluationResultID, bool isPass) {
            base.Channel.UpdateEvaluationResultIsPass(evaluationResultID, isPass);
        }
        
        public System.Threading.Tasks.Task UpdateEvaluationResultIsPassAsync(int evaluationResultID, bool isPass) {
            return base.Channel.UpdateEvaluationResultIsPassAsync(evaluationResultID, isPass);
        }
        
        public int GetEvaluationAttemptByUser(int userID) {
            return base.Channel.GetEvaluationAttemptByUser(userID);
        }
        
        public System.Threading.Tasks.Task<int> GetEvaluationAttemptByUserAsync(int userID) {
            return base.Channel.GetEvaluationAttemptByUserAsync(userID);
        }
        
        public HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult GetEvaluationAttemptByUserAndMEID(int userID, int MEID) {
            return base.Channel.GetEvaluationAttemptByUserAndMEID(userID, MEID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.EvaluationResult> GetEvaluationAttemptByUserAndMEIDAsync(int userID, int MEID) {
            return base.Channel.GetEvaluationAttemptByUserAndMEIDAsync(userID, MEID);
        }
        
        public int AddEvaluationQuestionResults(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult) {
            return base.Channel.AddEvaluationQuestionResults(evaluationQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> AddEvaluationQuestionResultsAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult) {
            return base.Channel.AddEvaluationQuestionResultsAsync(evaluationQuestionResult);
        }
        
        public int UpdateEvaluationQuestionResult(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult) {
            return base.Channel.UpdateEvaluationQuestionResult(evaluationQuestionResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationQuestionResultAsync(HCRGUniversityApp.NEPService.ExamInternalService.EvaluationQuestionResult evaluationQuestionResult) {
            return base.Channel.UpdateEvaluationQuestionResultAsync(evaluationQuestionResult);
        }
        
        public HCRGUniversityApp.NEPService.ExamInternalService.EvaluationAnswer[] GetAllEvaluationAnswer() {
            return base.Channel.GetAllEvaluationAnswer();
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityApp.NEPService.ExamInternalService.EvaluationAnswer[]> GetAllEvaluationAnswerAsync() {
            return base.Channel.GetAllEvaluationAnswerAsync();
        }
    }
}
