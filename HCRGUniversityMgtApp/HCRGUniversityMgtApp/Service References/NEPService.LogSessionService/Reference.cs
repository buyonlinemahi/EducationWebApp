//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRGUniversityMgtApp.NEPService.LogSessionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogSession", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class LogSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LogCreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LogSessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Browser {
            get {
                return this.BrowserField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserField, value) != true)) {
                    this.BrowserField = value;
                    this.RaisePropertyChanged("Browser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogCreatedDate {
            get {
                return this.LogCreatedDateField;
            }
            set {
                if ((this.LogCreatedDateField.Equals(value) != true)) {
                    this.LogCreatedDateField = value;
                    this.RaisePropertyChanged("LogCreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogSessionID {
            get {
                return this.LogSessionIDField;
            }
            set {
                if ((this.LogSessionIDField.Equals(value) != true)) {
                    this.LogSessionIDField = value;
                    this.RaisePropertyChanged("LogSessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MEID {
            get {
                return this.MEIDField;
            }
            set {
                if ((this.MEIDField.Equals(value) != true)) {
                    this.MEIDField = value;
                    this.RaisePropertyChanged("MEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PageUrl {
            get {
                return this.PageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PageUrlField, value) != true)) {
                    this.PageUrlField = value;
                    this.RaisePropertyChanged("PageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedLogSessionDetail", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedLogSessionDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.LogSessionService.LogSessionDetail[] LogSessionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.LogSessionService.LogSessionDetail[] LogSessionDetails {
            get {
                return this.LogSessionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.LogSessionDetailsField, value) != true)) {
                    this.LogSessionDetailsField = value;
                    this.RaisePropertyChanged("LogSessionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogSessionDetail", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class LogSessionDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CourseNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LogCreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LogSessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Browser {
            get {
                return this.BrowserField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserField, value) != true)) {
                    this.BrowserField = value;
                    this.RaisePropertyChanged("Browser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourseName {
            get {
                return this.CourseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseNameField, value) != true)) {
                    this.CourseNameField = value;
                    this.RaisePropertyChanged("CourseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogCreatedDate {
            get {
                return this.LogCreatedDateField;
            }
            set {
                if ((this.LogCreatedDateField.Equals(value) != true)) {
                    this.LogCreatedDateField = value;
                    this.RaisePropertyChanged("LogCreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogSessionID {
            get {
                return this.LogSessionIDField;
            }
            set {
                if ((this.LogSessionIDField.Equals(value) != true)) {
                    this.LogSessionIDField = value;
                    this.RaisePropertyChanged("LogSessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MEID {
            get {
                return this.MEIDField;
            }
            set {
                if ((this.MEIDField.Equals(value) != true)) {
                    this.MEIDField = value;
                    this.RaisePropertyChanged("MEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PageUrl {
            get {
                return this.PageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PageUrlField, value) != true)) {
                    this.PageUrlField = value;
                    this.RaisePropertyChanged("PageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NEPService.LogSessionService.ILogSessionService")]
    public interface ILogSessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/AddSession", ReplyAction="http://tempuri.org/ILogSessionService/AddSessionResponse")]
        int AddSession(HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession logSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/AddSession", ReplyAction="http://tempuri.org/ILogSessionService/AddSessionResponse")]
        System.Threading.Tasks.Task<int> AddSessionAsync(HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession logSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/LogModuleOrExam", ReplyAction="http://tempuri.org/ILogSessionService/LogModuleOrExamResponse")]
        void LogModuleOrExam(string browser, string newurl, int MEID, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/LogModuleOrExam", ReplyAction="http://tempuri.org/ILogSessionService/LogModuleOrExamResponse")]
        System.Threading.Tasks.Task LogModuleOrExamAsync(string browser, string newurl, int MEID, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/CheckLogModuleOrExam", ReplyAction="http://tempuri.org/ILogSessionService/CheckLogModuleOrExamResponse")]
        bool CheckLogModuleOrExam(int MEID, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/CheckLogModuleOrExam", ReplyAction="http://tempuri.org/ILogSessionService/CheckLogModuleOrExamResponse")]
        System.Threading.Tasks.Task<bool> CheckLogModuleOrExamAsync(int MEID, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSession", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionResponse")]
        void DeleteSession(string browser, int MEID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSession", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionResponse")]
        System.Threading.Tasks.Task DeleteSessionAsync(string browser, int MEID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/getLogSessionByUserIDAndMEID", ReplyAction="http://tempuri.org/ILogSessionService/getLogSessionByUserIDAndMEIDResponse")]
        HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession getLogSessionByUserIDAndMEID(int UserId, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/getLogSessionByUserIDAndMEID", ReplyAction="http://tempuri.org/ILogSessionService/getLogSessionByUserIDAndMEIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession> getLogSessionByUserIDAndMEIDAsync(int UserId, int MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSessionAfterSchedule", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionAfterScheduleResponse")]
        void DeleteSessionAfterSchedule(int UserID, int LogScheduleTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSessionAfterSchedule", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionAfterScheduleResponse")]
        System.Threading.Tasks.Task DeleteSessionAfterScheduleAsync(int UserID, int LogScheduleTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/getAllLogSession", ReplyAction="http://tempuri.org/ILogSessionService/getAllLogSessionResponse")]
        HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail getAllLogSession(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/getAllLogSession", ReplyAction="http://tempuri.org/ILogSessionService/getAllLogSessionResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail> getAllLogSessionAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/GetLogSessionByUserName", ReplyAction="http://tempuri.org/ILogSessionService/GetLogSessionByUserNameResponse")]
        HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail GetLogSessionByUserName(string username, int skip, int take, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/GetLogSessionByUserName", ReplyAction="http://tempuri.org/ILogSessionService/GetLogSessionByUserNameResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail> GetLogSessionByUserNameAsync(string username, int skip, int take, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSessionByAdmin", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionByAdminResponse")]
        void DeleteSessionByAdmin(int LogSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogSessionService/DeleteSessionByAdmin", ReplyAction="http://tempuri.org/ILogSessionService/DeleteSessionByAdminResponse")]
        System.Threading.Tasks.Task DeleteSessionByAdminAsync(int LogSessionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogSessionServiceChannel : HCRGUniversityMgtApp.NEPService.LogSessionService.ILogSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogSessionServiceClient : System.ServiceModel.ClientBase<HCRGUniversityMgtApp.NEPService.LogSessionService.ILogSessionService>, HCRGUniversityMgtApp.NEPService.LogSessionService.ILogSessionService {
        
        public LogSessionServiceClient() {
        }
        
        public LogSessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogSessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogSessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogSessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddSession(HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession logSession) {
            return base.Channel.AddSession(logSession);
        }
        
        public System.Threading.Tasks.Task<int> AddSessionAsync(HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession logSession) {
            return base.Channel.AddSessionAsync(logSession);
        }
        
        public void LogModuleOrExam(string browser, string newurl, int MEID, int UserId) {
            base.Channel.LogModuleOrExam(browser, newurl, MEID, UserId);
        }
        
        public System.Threading.Tasks.Task LogModuleOrExamAsync(string browser, string newurl, int MEID, int UserId) {
            return base.Channel.LogModuleOrExamAsync(browser, newurl, MEID, UserId);
        }
        
        public bool CheckLogModuleOrExam(int MEID, int UserId) {
            return base.Channel.CheckLogModuleOrExam(MEID, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckLogModuleOrExamAsync(int MEID, int UserId) {
            return base.Channel.CheckLogModuleOrExamAsync(MEID, UserId);
        }
        
        public void DeleteSession(string browser, int MEID, int UserID) {
            base.Channel.DeleteSession(browser, MEID, UserID);
        }
        
        public System.Threading.Tasks.Task DeleteSessionAsync(string browser, int MEID, int UserID) {
            return base.Channel.DeleteSessionAsync(browser, MEID, UserID);
        }
        
        public HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession getLogSessionByUserIDAndMEID(int UserId, int MEID) {
            return base.Channel.getLogSessionByUserIDAndMEID(UserId, MEID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.LogSession> getLogSessionByUserIDAndMEIDAsync(int UserId, int MEID) {
            return base.Channel.getLogSessionByUserIDAndMEIDAsync(UserId, MEID);
        }
        
        public void DeleteSessionAfterSchedule(int UserID, int LogScheduleTime) {
            base.Channel.DeleteSessionAfterSchedule(UserID, LogScheduleTime);
        }
        
        public System.Threading.Tasks.Task DeleteSessionAfterScheduleAsync(int UserID, int LogScheduleTime) {
            return base.Channel.DeleteSessionAfterScheduleAsync(UserID, LogScheduleTime);
        }
        
        public HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail getAllLogSession(int skip, int take) {
            return base.Channel.getAllLogSession(skip, take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail> getAllLogSessionAsync(int skip, int take) {
            return base.Channel.getAllLogSessionAsync(skip, take);
        }
        
        public HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail GetLogSessionByUserName(string username, int skip, int take, int organizationId) {
            return base.Channel.GetLogSessionByUserName(username, skip, take, organizationId);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.LogSessionService.PagedLogSessionDetail> GetLogSessionByUserNameAsync(string username, int skip, int take, int organizationId) {
            return base.Channel.GetLogSessionByUserNameAsync(username, skip, take, organizationId);
        }
        
        public void DeleteSessionByAdmin(int LogSessionID) {
            base.Channel.DeleteSessionByAdmin(LogSessionID);
        }
        
        public System.Threading.Tasks.Task DeleteSessionByAdminAsync(int LogSessionID) {
            return base.Channel.DeleteSessionByAdminAsync(LogSessionID);
        }
    }
}
