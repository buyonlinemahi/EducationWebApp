//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRGUniversityMgtApp.NEPService.ClientService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDataColumn", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Base")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HCRGUniversityMgtApp.NEPService.ClientService.Client))]
    public partial class BaseDataColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ApproveByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ApproveOnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ApproveBy {
            get {
                return this.ApproveByField;
            }
            set {
                if ((this.ApproveByField.Equals(value) != true)) {
                    this.ApproveByField = value;
                    this.RaisePropertyChanged("ApproveBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ApproveOn {
            get {
                return this.ApproveOnField;
            }
            set {
                if ((this.ApproveOnField.Equals(value) != true)) {
                    this.ApproveOnField = value;
                    this.RaisePropertyChanged("ApproveOn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class Client : HCRGUniversityMgtApp.NEPService.ClientService.BaseDataColumn {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientSessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEmailSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientSessionID {
            get {
                return this.ClientSessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientSessionIDField, value) != true)) {
                    this.ClientSessionIDField = value;
                    this.RaisePropertyChanged("ClientSessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientTypeID {
            get {
                return this.ClientTypeIDField;
            }
            set {
                if ((this.ClientTypeIDField.Equals(value) != true)) {
                    this.ClientTypeIDField = value;
                    this.RaisePropertyChanged("ClientTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsApproved {
            get {
                return this.IsApprovedField;
            }
            set {
                if ((this.IsApprovedField.Equals(value) != true)) {
                    this.IsApprovedField = value;
                    this.RaisePropertyChanged("IsApproved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsEmailSent {
            get {
                return this.IsEmailSentField;
            }
            set {
                if ((this.IsEmailSentField.Equals(value) != true)) {
                    this.IsEmailSentField = value;
                    this.RaisePropertyChanged("IsEmailSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationID {
            get {
                return this.OrganizationIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationIDField, value) != true)) {
                    this.OrganizationIDField = value;
                    this.RaisePropertyChanged("OrganizationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateID {
            get {
                return this.StateIDField;
            }
            set {
                if ((this.StateIDField.Equals(value) != true)) {
                    this.StateIDField = value;
                    this.RaisePropertyChanged("StateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Organization", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class Organization : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaviconImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsWebPortalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogoImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisteredPaypalEmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ThemeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebsiteNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaviconImage {
            get {
                return this.FaviconImageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaviconImageField, value) != true)) {
                    this.FaviconImageField = value;
                    this.RaisePropertyChanged("FaviconImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsCertificate {
            get {
                return this.IsCertificateField;
            }
            set {
                if ((this.IsCertificateField.Equals(value) != true)) {
                    this.IsCertificateField = value;
                    this.RaisePropertyChanged("IsCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsWebPortal {
            get {
                return this.IsWebPortalField;
            }
            set {
                if ((this.IsWebPortalField.Equals(value) != true)) {
                    this.IsWebPortalField = value;
                    this.RaisePropertyChanged("IsWebPortal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogoImage {
            get {
                return this.LogoImageField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoImageField, value) != true)) {
                    this.LogoImageField = value;
                    this.RaisePropertyChanged("LogoImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuIDs {
            get {
                return this.MenuIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuIDsField, value) != true)) {
                    this.MenuIDsField = value;
                    this.RaisePropertyChanged("MenuIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizationID {
            get {
                return this.OrganizationIDField;
            }
            set {
                if ((this.OrganizationIDField.Equals(value) != true)) {
                    this.OrganizationIDField = value;
                    this.RaisePropertyChanged("OrganizationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisteredPaypalEmailID {
            get {
                return this.RegisteredPaypalEmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisteredPaypalEmailIDField, value) != true)) {
                    this.RegisteredPaypalEmailIDField = value;
                    this.RaisePropertyChanged("RegisteredPaypalEmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ThemeID {
            get {
                return this.ThemeIDField;
            }
            set {
                if ((this.ThemeIDField.Equals(value) != true)) {
                    this.ThemeIDField = value;
                    this.RaisePropertyChanged("ThemeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebsiteName {
            get {
                return this.WebsiteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WebsiteNameField, value) != true)) {
                    this.WebsiteNameField = value;
                    this.RaisePropertyChanged("WebsiteName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Menu", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class Menu : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MenuIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MenuID {
            get {
                return this.MenuIDField;
            }
            set {
                if ((this.MenuIDField.Equals(value) != true)) {
                    this.MenuIDField = value;
                    this.RaisePropertyChanged("MenuID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName {
            get {
                return this.MenuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuNameField, value) != true)) {
                    this.MenuNameField = value;
                    this.RaisePropertyChanged("MenuName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseColumn", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Base")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact))]
    public partial class BaseColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizationIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizationID {
            get {
                return this.OrganizationIDField;
            }
            set {
                if ((this.OrganizationIDField.Equals(value) != true)) {
                    this.OrganizationIDField = value;
                    this.RaisePropertyChanged("OrganizationID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationContact", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class OrganizationContact : HCRGUniversityMgtApp.NEPService.ClientService.BaseColumn {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizationContactIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationHour {
            get {
                return this.OperationHourField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationHourField, value) != true)) {
                    this.OperationHourField = value;
                    this.RaisePropertyChanged("OperationHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizationContactID {
            get {
                return this.OrganizationContactIDField;
            }
            set {
                if ((this.OrganizationContactIDField.Equals(value) != true)) {
                    this.OrganizationContactIDField = value;
                    this.RaisePropertyChanged("OrganizationContactID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateID {
            get {
                return this.StateIDField;
            }
            set {
                if ((this.StateIDField.Equals(value) != true)) {
                    this.StateIDField = value;
                    this.RaisePropertyChanged("StateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedClient", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedClient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ClientService.Client[] ClientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ClientService.Client[] Clients {
            get {
                return this.ClientsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientsField, value) != true)) {
                    this.ClientsField = value;
                    this.RaisePropertyChanged("Clients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NEPService.ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        int AddClient(HCRGUniversityMgtApp.NEPService.ClientService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        System.Threading.Tasks.Task<int> AddClientAsync(HCRGUniversityMgtApp.NEPService.ClientService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        int UpdateClient(HCRGUniversityMgtApp.NEPService.ClientService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        System.Threading.Tasks.Task<int> UpdateClientAsync(HCRGUniversityMgtApp.NEPService.ClientService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteClient", ReplyAction="http://tempuri.org/IClientService/DeleteClientResponse")]
        void DeleteClient(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteClient", ReplyAction="http://tempuri.org/IClientService/DeleteClientResponse")]
        System.Threading.Tasks.Task DeleteClientAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddOrganization", ReplyAction="http://tempuri.org/IClientService/AddOrganizationResponse")]
        int AddOrganization(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddOrganization", ReplyAction="http://tempuri.org/IClientService/AddOrganizationResponse")]
        System.Threading.Tasks.Task<int> AddOrganizationAsync(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateOrganization", ReplyAction="http://tempuri.org/IClientService/UpdateOrganizationResponse")]
        int UpdateOrganization(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateOrganization", ReplyAction="http://tempuri.org/IClientService/UpdateOrganizationResponse")]
        System.Threading.Tasks.Task<int> UpdateOrganizationAsync(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteOrganization", ReplyAction="http://tempuri.org/IClientService/DeleteOrganizationResponse")]
        void DeleteOrganization(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteOrganization", ReplyAction="http://tempuri.org/IClientService/DeleteOrganizationResponse")]
        System.Threading.Tasks.Task DeleteOrganizationAsync(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/getAllOrganization", ReplyAction="http://tempuri.org/IClientService/getAllOrganizationResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Organization[] getAllOrganization();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/getAllOrganization", ReplyAction="http://tempuri.org/IClientService/getAllOrganizationResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization[]> getAllOrganizationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/getOrganizationByOrganizationID", ReplyAction="http://tempuri.org/IClientService/getOrganizationByOrganizationIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Organization[] getOrganizationByOrganizationID(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/getOrganizationByOrganizationID", ReplyAction="http://tempuri.org/IClientService/getOrganizationByOrganizationIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization[]> getOrganizationByOrganizationIDAsync(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Organization GetOrganizationByID(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization> GetOrganizationByIDAsync(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationMenuByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationMenuByOrganizationIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Menu[] GetOrganizationMenuByOrganizationID(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationMenuByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationMenuByOrganizationIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Menu[]> GetOrganizationMenuByOrganizationIDAsync(int organizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddOrganizationContact", ReplyAction="http://tempuri.org/IClientService/AddOrganizationContactResponse")]
        int AddOrganizationContact(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddOrganizationContact", ReplyAction="http://tempuri.org/IClientService/AddOrganizationContactResponse")]
        System.Threading.Tasks.Task<int> AddOrganizationContactAsync(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateOrganizationContact", ReplyAction="http://tempuri.org/IClientService/UpdateOrganizationContactResponse")]
        int UpdateOrganizationContact(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateOrganizationContact", ReplyAction="http://tempuri.org/IClientService/UpdateOrganizationContactResponse")]
        System.Threading.Tasks.Task<int> UpdateOrganizationContactAsync(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteOrganizationContact", ReplyAction="http://tempuri.org/IClientService/DeleteOrganizationContactResponse")]
        void DeleteOrganizationContact(int contactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteOrganizationContact", ReplyAction="http://tempuri.org/IClientService/DeleteOrganizationContactResponse")]
        System.Threading.Tasks.Task DeleteOrganizationContactAsync(int contactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationContactByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationContactByOrganizationIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact[] GetOrganizationContactByOrganizationID(int organizationID, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationContactByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationContactByOrganizationIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact[]> GetOrganizationContactByOrganizationIDAsync(int organizationID, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationContactByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationContactByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact GetOrganizationContactByID(int orgContactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationContactByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationContactByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact> GetOrganizationContactByIDAsync(int orgContactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetSingleOrgContactByOrgID", ReplyAction="http://tempuri.org/IClientService/GetSingleOrgContactByOrgIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact GetSingleOrgContactByOrgID(int _orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetSingleOrgContactByOrgID", ReplyAction="http://tempuri.org/IClientService/GetSingleOrgContactByOrgIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact> GetSingleOrgContactByOrgIDAsync(int _orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationClientsByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationClientsByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetOrganizationClientsByID(int OrganizationID, int Skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetOrganizationClientsByID", ReplyAction="http://tempuri.org/IClientService/GetOrganizationClientsByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetOrganizationClientsByIDAsync(int OrganizationID, int Skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllClients", ReplyAction="http://tempuri.org/IClientService/GetAllClientsResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client[] GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllClients", ReplyAction="http://tempuri.org/IClientService/GetAllClientsResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client[]> GetAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByEmailID", ReplyAction="http://tempuri.org/IClientService/GetClientByEmailIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByEmailID(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByEmailID", ReplyAction="http://tempuri.org/IClientService/GetClientByEmailIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByEmailIDAsync(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByID", ReplyAction="http://tempuri.org/IClientService/GetClientByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByID(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByID", ReplyAction="http://tempuri.org/IClientService/GetClientByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByIDAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientVerifiedDetails", ReplyAction="http://tempuri.org/IClientService/GetClientVerifiedDetailsResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientVerifiedDetails(int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientVerifiedDetails", ReplyAction="http://tempuri.org/IClientService/GetClientVerifiedDetailsResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientVerifiedDetailsAsync(int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByClientName", ReplyAction="http://tempuri.org/IClientService/GetClientByClientNameResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByClientName(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByClientName", ReplyAction="http://tempuri.org/IClientService/GetClientByClientNameResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByClientNameAsync(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByEmailAndOrganizationId", ReplyAction="http://tempuri.org/IClientService/GetClientByEmailAndOrganizationIdResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByEmailAndOrganizationId(string _clientEmailID, int OrganizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientByEmailAndOrganizationId", ReplyAction="http://tempuri.org/IClientService/GetClientByEmailAndOrganizationIdResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByEmailAndOrganizationIdAsync(string _clientEmailID, int OrganizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByPlanID", ReplyAction="http://tempuri.org/IClientService/GetClientsByPlanIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.Client[] GetClientsByPlanID(int planID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByPlanID", ReplyAction="http://tempuri.org/IClientService/GetClientsByPlanIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client[]> GetClientsByPlanIDAsync(int planID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetClientsByOrganizationIDResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsByOrganizationID(int OrganizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByOrganizationID", ReplyAction="http://tempuri.org/IClientService/GetClientsByOrganizationIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsByOrganizationIDAsync(int OrganizationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsOrganization", ReplyAction="http://tempuri.org/IClientService/GetClientsOrganizationResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsOrganization();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsOrganization", ReplyAction="http://tempuri.org/IClientService/GetClientsOrganizationResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsOrganizationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByName", ReplyAction="http://tempuri.org/IClientService/GetClientsByNameResponse")]
        HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsByName(string name, int skip, int take, int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientsByName", ReplyAction="http://tempuri.org/IClientService/GetClientsByNameResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsByNameAsync(string name, int skip, int take, int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ResetClientPassword", ReplyAction="http://tempuri.org/IClientService/ResetClientPasswordResponse")]
        void ResetClientPassword(int _clientID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ResetClientPassword", ReplyAction="http://tempuri.org/IClientService/ResetClientPasswordResponse")]
        System.Threading.Tasks.Task ResetClientPasswordAsync(int _clientID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClientSessionIDByClientID", ReplyAction="http://tempuri.org/IClientService/UpdateClientSessionIDByClientIDResponse")]
        void UpdateClientSessionIDByClientID(int clientId, string clientSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClientSessionIDByClientID", ReplyAction="http://tempuri.org/IClientService/UpdateClientSessionIDByClientIDResponse")]
        System.Threading.Tasks.Task UpdateClientSessionIDByClientIDAsync(int clientId, string clientSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ResetClientSessionID", ReplyAction="http://tempuri.org/IClientService/ResetClientSessionIDResponse")]
        void ResetClientSessionID(int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ResetClientSessionID", ReplyAction="http://tempuri.org/IClientService/ResetClientSessionIDResponse")]
        System.Threading.Tasks.Task ResetClientSessionIDAsync(int ClientID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : HCRGUniversityMgtApp.NEPService.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<HCRGUniversityMgtApp.NEPService.ClientService.IClientService>, HCRGUniversityMgtApp.NEPService.ClientService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddClient(HCRGUniversityMgtApp.NEPService.ClientService.Client client) {
            return base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task<int> AddClientAsync(HCRGUniversityMgtApp.NEPService.ClientService.Client client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public int UpdateClient(HCRGUniversityMgtApp.NEPService.ClientService.Client client) {
            return base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task<int> UpdateClientAsync(HCRGUniversityMgtApp.NEPService.ClientService.Client client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public void DeleteClient(int clientID) {
            base.Channel.DeleteClient(clientID);
        }
        
        public System.Threading.Tasks.Task DeleteClientAsync(int clientID) {
            return base.Channel.DeleteClientAsync(clientID);
        }
        
        public int AddOrganization(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization) {
            return base.Channel.AddOrganization(organization);
        }
        
        public System.Threading.Tasks.Task<int> AddOrganizationAsync(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization) {
            return base.Channel.AddOrganizationAsync(organization);
        }
        
        public int UpdateOrganization(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization) {
            return base.Channel.UpdateOrganization(organization);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrganizationAsync(HCRGUniversityMgtApp.NEPService.ClientService.Organization organization) {
            return base.Channel.UpdateOrganizationAsync(organization);
        }
        
        public void DeleteOrganization(int organizationID) {
            base.Channel.DeleteOrganization(organizationID);
        }
        
        public System.Threading.Tasks.Task DeleteOrganizationAsync(int organizationID) {
            return base.Channel.DeleteOrganizationAsync(organizationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Organization[] getAllOrganization() {
            return base.Channel.getAllOrganization();
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization[]> getAllOrganizationAsync() {
            return base.Channel.getAllOrganizationAsync();
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Organization[] getOrganizationByOrganizationID(int organizationID) {
            return base.Channel.getOrganizationByOrganizationID(organizationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization[]> getOrganizationByOrganizationIDAsync(int organizationID) {
            return base.Channel.getOrganizationByOrganizationIDAsync(organizationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Organization GetOrganizationByID(int organizationID) {
            return base.Channel.GetOrganizationByID(organizationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Organization> GetOrganizationByIDAsync(int organizationID) {
            return base.Channel.GetOrganizationByIDAsync(organizationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Menu[] GetOrganizationMenuByOrganizationID(int organizationID) {
            return base.Channel.GetOrganizationMenuByOrganizationID(organizationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Menu[]> GetOrganizationMenuByOrganizationIDAsync(int organizationID) {
            return base.Channel.GetOrganizationMenuByOrganizationIDAsync(organizationID);
        }
        
        public int AddOrganizationContact(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact) {
            return base.Channel.AddOrganizationContact(contact);
        }
        
        public System.Threading.Tasks.Task<int> AddOrganizationContactAsync(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact) {
            return base.Channel.AddOrganizationContactAsync(contact);
        }
        
        public int UpdateOrganizationContact(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact) {
            return base.Channel.UpdateOrganizationContact(contact);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrganizationContactAsync(HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact contact) {
            return base.Channel.UpdateOrganizationContactAsync(contact);
        }
        
        public void DeleteOrganizationContact(int contactID) {
            base.Channel.DeleteOrganizationContact(contactID);
        }
        
        public System.Threading.Tasks.Task DeleteOrganizationContactAsync(int contactID) {
            return base.Channel.DeleteOrganizationContactAsync(contactID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact[] GetOrganizationContactByOrganizationID(int organizationID, int ClientID) {
            return base.Channel.GetOrganizationContactByOrganizationID(organizationID, ClientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact[]> GetOrganizationContactByOrganizationIDAsync(int organizationID, int ClientID) {
            return base.Channel.GetOrganizationContactByOrganizationIDAsync(organizationID, ClientID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact GetOrganizationContactByID(int orgContactID) {
            return base.Channel.GetOrganizationContactByID(orgContactID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact> GetOrganizationContactByIDAsync(int orgContactID) {
            return base.Channel.GetOrganizationContactByIDAsync(orgContactID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact GetSingleOrgContactByOrgID(int _orgID) {
            return base.Channel.GetSingleOrgContactByOrgID(_orgID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.OrganizationContact> GetSingleOrgContactByOrgIDAsync(int _orgID) {
            return base.Channel.GetSingleOrgContactByOrgIDAsync(_orgID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetOrganizationClientsByID(int OrganizationID, int Skip, int take) {
            return base.Channel.GetOrganizationClientsByID(OrganizationID, Skip, take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetOrganizationClientsByIDAsync(int OrganizationID, int Skip, int take) {
            return base.Channel.GetOrganizationClientsByIDAsync(OrganizationID, Skip, take);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client[] GetAllClients() {
            return base.Channel.GetAllClients();
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client[]> GetAllClientsAsync() {
            return base.Channel.GetAllClientsAsync();
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByEmailID(string EmailID) {
            return base.Channel.GetClientByEmailID(EmailID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByEmailIDAsync(string EmailID) {
            return base.Channel.GetClientByEmailIDAsync(EmailID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByID(int clientID) {
            return base.Channel.GetClientByID(clientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByIDAsync(int clientID) {
            return base.Channel.GetClientByIDAsync(clientID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientVerifiedDetails(int _skip, int _take) {
            return base.Channel.GetClientVerifiedDetails(_skip, _take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientVerifiedDetailsAsync(int _skip, int _take) {
            return base.Channel.GetClientVerifiedDetailsAsync(_skip, _take);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByClientName(string clientName) {
            return base.Channel.GetClientByClientName(clientName);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByClientNameAsync(string clientName) {
            return base.Channel.GetClientByClientNameAsync(clientName);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client GetClientByEmailAndOrganizationId(string _clientEmailID, int OrganizationID) {
            return base.Channel.GetClientByEmailAndOrganizationId(_clientEmailID, OrganizationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client> GetClientByEmailAndOrganizationIdAsync(string _clientEmailID, int OrganizationID) {
            return base.Channel.GetClientByEmailAndOrganizationIdAsync(_clientEmailID, OrganizationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.Client[] GetClientsByPlanID(int planID) {
            return base.Channel.GetClientsByPlanID(planID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.Client[]> GetClientsByPlanIDAsync(int planID) {
            return base.Channel.GetClientsByPlanIDAsync(planID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsByOrganizationID(int OrganizationID) {
            return base.Channel.GetClientsByOrganizationID(OrganizationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsByOrganizationIDAsync(int OrganizationID) {
            return base.Channel.GetClientsByOrganizationIDAsync(OrganizationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsOrganization() {
            return base.Channel.GetClientsOrganization();
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsOrganizationAsync() {
            return base.Channel.GetClientsOrganizationAsync();
        }
        
        public HCRGUniversityMgtApp.NEPService.ClientService.PagedClient GetClientsByName(string name, int skip, int take, int clientID) {
            return base.Channel.GetClientsByName(name, skip, take, clientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ClientService.PagedClient> GetClientsByNameAsync(string name, int skip, int take, int clientID) {
            return base.Channel.GetClientsByNameAsync(name, skip, take, clientID);
        }
        
        public void ResetClientPassword(int _clientID, string password) {
            base.Channel.ResetClientPassword(_clientID, password);
        }
        
        public System.Threading.Tasks.Task ResetClientPasswordAsync(int _clientID, string password) {
            return base.Channel.ResetClientPasswordAsync(_clientID, password);
        }
        
        public void UpdateClientSessionIDByClientID(int clientId, string clientSessionID) {
            base.Channel.UpdateClientSessionIDByClientID(clientId, clientSessionID);
        }
        
        public System.Threading.Tasks.Task UpdateClientSessionIDByClientIDAsync(int clientId, string clientSessionID) {
            return base.Channel.UpdateClientSessionIDByClientIDAsync(clientId, clientSessionID);
        }
        
        public void ResetClientSessionID(int ClientID) {
            base.Channel.ResetClientSessionID(ClientID);
        }
        
        public System.Threading.Tasks.Task ResetClientSessionIDAsync(int ClientID) {
            return base.Channel.ResetClientSessionIDAsync(ClientID);
        }
    }
}
