//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRGUniversityMgtApp.NEPService.ExamQuestionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class ExamQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExamAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamAnswerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamQuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamAnswer {
            get {
                return this.ExamAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamAnswerField, value) != true)) {
                    this.ExamAnswerField = value;
                    this.RaisePropertyChanged("ExamAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ExamAnswerTrueFalse {
            get {
                return this.ExamAnswerTrueFalseField;
            }
            set {
                if ((this.ExamAnswerTrueFalseField.Equals(value) != true)) {
                    this.ExamAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("ExamAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamAnswerType {
            get {
                return this.ExamAnswerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamAnswerTypeField, value) != true)) {
                    this.ExamAnswerTypeField = value;
                    this.RaisePropertyChanged("ExamAnswerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionA {
            get {
                return this.ExamOptionAField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionAField, value) != true)) {
                    this.ExamOptionAField = value;
                    this.RaisePropertyChanged("ExamOptionA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionB {
            get {
                return this.ExamOptionBField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionBField, value) != true)) {
                    this.ExamOptionBField = value;
                    this.RaisePropertyChanged("ExamOptionB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionC {
            get {
                return this.ExamOptionCField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionCField, value) != true)) {
                    this.ExamOptionCField = value;
                    this.RaisePropertyChanged("ExamOptionC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionD {
            get {
                return this.ExamOptionDField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionDField, value) != true)) {
                    this.ExamOptionDField = value;
                    this.RaisePropertyChanged("ExamOptionD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamQues {
            get {
                return this.ExamQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamQuesField, value) != true)) {
                    this.ExamQuesField = value;
                    this.RaisePropertyChanged("ExamQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamQuestionID {
            get {
                return this.ExamQuestionIDField;
            }
            set {
                if ((this.ExamQuestionIDField.Equals(value) != true)) {
                    this.ExamQuestionIDField = value;
                    this.RaisePropertyChanged("ExamQuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedExamQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedExamQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[] ExamQuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[] ExamQuestions {
            get {
                return this.ExamQuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamQuestionsField, value) != true)) {
                    this.ExamQuestionsField = value;
                    this.RaisePropertyChanged("ExamQuestions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamQuestionDetail", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class ExamQuestionDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExamAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamAnswerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamOptionDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamQuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamAnswer {
            get {
                return this.ExamAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamAnswerField, value) != true)) {
                    this.ExamAnswerField = value;
                    this.RaisePropertyChanged("ExamAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ExamAnswerTrueFalse {
            get {
                return this.ExamAnswerTrueFalseField;
            }
            set {
                if ((this.ExamAnswerTrueFalseField.Equals(value) != true)) {
                    this.ExamAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("ExamAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamAnswerType {
            get {
                return this.ExamAnswerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamAnswerTypeField, value) != true)) {
                    this.ExamAnswerTypeField = value;
                    this.RaisePropertyChanged("ExamAnswerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionA {
            get {
                return this.ExamOptionAField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionAField, value) != true)) {
                    this.ExamOptionAField = value;
                    this.RaisePropertyChanged("ExamOptionA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionB {
            get {
                return this.ExamOptionBField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionBField, value) != true)) {
                    this.ExamOptionBField = value;
                    this.RaisePropertyChanged("ExamOptionB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionC {
            get {
                return this.ExamOptionCField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionCField, value) != true)) {
                    this.ExamOptionCField = value;
                    this.RaisePropertyChanged("ExamOptionC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamOptionD {
            get {
                return this.ExamOptionDField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamOptionDField, value) != true)) {
                    this.ExamOptionDField = value;
                    this.RaisePropertyChanged("ExamOptionD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamQues {
            get {
                return this.ExamQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamQuesField, value) != true)) {
                    this.ExamQuesField = value;
                    this.RaisePropertyChanged("ExamQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamQuestionID {
            get {
                return this.ExamQuestionIDField;
            }
            set {
                if ((this.ExamQuestionIDField.Equals(value) != true)) {
                    this.ExamQuestionIDField = value;
                    this.RaisePropertyChanged("ExamQuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreTestQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class PreTestQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> PreTestAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestAnswerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestQuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestAnswer {
            get {
                return this.PreTestAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestAnswerField, value) != true)) {
                    this.PreTestAnswerField = value;
                    this.RaisePropertyChanged("PreTestAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> PreTestAnswerTrueFalse {
            get {
                return this.PreTestAnswerTrueFalseField;
            }
            set {
                if ((this.PreTestAnswerTrueFalseField.Equals(value) != true)) {
                    this.PreTestAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("PreTestAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestAnswerType {
            get {
                return this.PreTestAnswerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestAnswerTypeField, value) != true)) {
                    this.PreTestAnswerTypeField = value;
                    this.RaisePropertyChanged("PreTestAnswerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestID {
            get {
                return this.PreTestIDField;
            }
            set {
                if ((this.PreTestIDField.Equals(value) != true)) {
                    this.PreTestIDField = value;
                    this.RaisePropertyChanged("PreTestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionA {
            get {
                return this.PreTestOptionAField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionAField, value) != true)) {
                    this.PreTestOptionAField = value;
                    this.RaisePropertyChanged("PreTestOptionA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionB {
            get {
                return this.PreTestOptionBField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionBField, value) != true)) {
                    this.PreTestOptionBField = value;
                    this.RaisePropertyChanged("PreTestOptionB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionC {
            get {
                return this.PreTestOptionCField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionCField, value) != true)) {
                    this.PreTestOptionCField = value;
                    this.RaisePropertyChanged("PreTestOptionC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionD {
            get {
                return this.PreTestOptionDField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionDField, value) != true)) {
                    this.PreTestOptionDField = value;
                    this.RaisePropertyChanged("PreTestOptionD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestQues {
            get {
                return this.PreTestQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestQuesField, value) != true)) {
                    this.PreTestQuesField = value;
                    this.RaisePropertyChanged("PreTestQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestQuestionID {
            get {
                return this.PreTestQuestionIDField;
            }
            set {
                if ((this.PreTestQuestionIDField.Equals(value) != true)) {
                    this.PreTestQuestionIDField = value;
                    this.RaisePropertyChanged("PreTestQuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPreTestQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPreTestQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion[] PreTestQuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion[] PreTestQuestions {
            get {
                return this.PreTestQuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestQuestionsField, value) != true)) {
                    this.PreTestQuestionsField = value;
                    this.RaisePropertyChanged("PreTestQuestions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreTestQuestionDetail", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class PreTestQuestionDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> PreTestAnswerTrueFalseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestAnswerTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestOptionDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestQuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestAnswer {
            get {
                return this.PreTestAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestAnswerField, value) != true)) {
                    this.PreTestAnswerField = value;
                    this.RaisePropertyChanged("PreTestAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> PreTestAnswerTrueFalse {
            get {
                return this.PreTestAnswerTrueFalseField;
            }
            set {
                if ((this.PreTestAnswerTrueFalseField.Equals(value) != true)) {
                    this.PreTestAnswerTrueFalseField = value;
                    this.RaisePropertyChanged("PreTestAnswerTrueFalse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestAnswerType {
            get {
                return this.PreTestAnswerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestAnswerTypeField, value) != true)) {
                    this.PreTestAnswerTypeField = value;
                    this.RaisePropertyChanged("PreTestAnswerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestID {
            get {
                return this.PreTestIDField;
            }
            set {
                if ((this.PreTestIDField.Equals(value) != true)) {
                    this.PreTestIDField = value;
                    this.RaisePropertyChanged("PreTestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionA {
            get {
                return this.PreTestOptionAField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionAField, value) != true)) {
                    this.PreTestOptionAField = value;
                    this.RaisePropertyChanged("PreTestOptionA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionB {
            get {
                return this.PreTestOptionBField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionBField, value) != true)) {
                    this.PreTestOptionBField = value;
                    this.RaisePropertyChanged("PreTestOptionB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionC {
            get {
                return this.PreTestOptionCField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionCField, value) != true)) {
                    this.PreTestOptionCField = value;
                    this.RaisePropertyChanged("PreTestOptionC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestOptionD {
            get {
                return this.PreTestOptionDField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestOptionDField, value) != true)) {
                    this.PreTestOptionDField = value;
                    this.RaisePropertyChanged("PreTestOptionD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestQues {
            get {
                return this.PreTestQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestQuesField, value) != true)) {
                    this.PreTestQuesField = value;
                    this.RaisePropertyChanged("PreTestQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestQuestionID {
            get {
                return this.PreTestQuestionIDField;
            }
            set {
                if ((this.PreTestQuestionIDField.Equals(value) != true)) {
                    this.PreTestQuestionIDField = value;
                    this.RaisePropertyChanged("PreTestQuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EducationExamQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EducationExamQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CourseExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CourseExamID {
            get {
                return this.CourseExamIDField;
            }
            set {
                if ((this.CourseExamIDField.Equals(value) != true)) {
                    this.CourseExamIDField = value;
                    this.RaisePropertyChanged("CourseExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EducationPreTestQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EducationPreTestQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoursePreTestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoursePreTestID {
            get {
                return this.CoursePreTestIDField;
            }
            set {
                if ((this.CoursePreTestIDField.Equals(value) != true)) {
                    this.CoursePreTestIDField = value;
                    this.RaisePropertyChanged("CoursePreTestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestID {
            get {
                return this.PreTestIDField;
            }
            set {
                if ((this.PreTestIDField.Equals(value) != true)) {
                    this.PreTestIDField = value;
                    this.RaisePropertyChanged("PreTestID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseColumn", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Base")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam))]
    public partial class BaseColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizationIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizationID {
            get {
                return this.OrganizationIDField;
            }
            set {
                if ((this.OrganizationIDField.Equals(value) != true)) {
                    this.OrganizationIDField = value;
                    this.RaisePropertyChanged("OrganizationID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreTest", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class PreTest : HCRGUniversityMgtApp.NEPService.ExamQuestionService.BaseColumn {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PreTestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreTestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PreTestStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PreTestID {
            get {
                return this.PreTestIDField;
            }
            set {
                if ((this.PreTestIDField.Equals(value) != true)) {
                    this.PreTestIDField = value;
                    this.RaisePropertyChanged("PreTestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreTestName {
            get {
                return this.PreTestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestNameField, value) != true)) {
                    this.PreTestNameField = value;
                    this.RaisePropertyChanged("PreTestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreTestStatus {
            get {
                return this.PreTestStatusField;
            }
            set {
                if ((this.PreTestStatusField.Equals(value) != true)) {
                    this.PreTestStatusField = value;
                    this.RaisePropertyChanged("PreTestStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Evaluation", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class Evaluation : HCRGUniversityMgtApp.NEPService.ExamQuestionService.BaseColumn {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EvaluationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EvaluationStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationID {
            get {
                return this.EvaluationIDField;
            }
            set {
                if ((this.EvaluationIDField.Equals(value) != true)) {
                    this.EvaluationIDField = value;
                    this.RaisePropertyChanged("EvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvaluationName {
            get {
                return this.EvaluationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationNameField, value) != true)) {
                    this.EvaluationNameField = value;
                    this.RaisePropertyChanged("EvaluationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EvaluationStatus {
            get {
                return this.EvaluationStatusField;
            }
            set {
                if ((this.EvaluationStatusField.Equals(value) != true)) {
                    this.EvaluationStatusField = value;
                    this.RaisePropertyChanged("EvaluationStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Exam", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class Exam : HCRGUniversityMgtApp.NEPService.ExamQuestionService.BaseColumn {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExamStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamID {
            get {
                return this.ExamIDField;
            }
            set {
                if ((this.ExamIDField.Equals(value) != true)) {
                    this.ExamIDField = value;
                    this.RaisePropertyChanged("ExamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExamName {
            get {
                return this.ExamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamNameField, value) != true)) {
                    this.ExamNameField = value;
                    this.RaisePropertyChanged("ExamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExamStatus {
            get {
                return this.ExamStatusField;
            }
            set {
                if ((this.ExamStatusField.Equals(value) != true)) {
                    this.ExamStatusField = value;
                    this.RaisePropertyChanged("ExamStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedExam", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedExam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[] ExamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[] Exams {
            get {
                return this.ExamsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamsField, value) != true)) {
                    this.ExamsField = value;
                    this.RaisePropertyChanged("Exams");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPreTest", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPreTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[] PreTestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[] PreTests {
            get {
                return this.PreTestsField;
            }
            set {
                if ((object.ReferenceEquals(this.PreTestsField, value) != true)) {
                    this.PreTestsField = value;
                    this.RaisePropertyChanged("PreTests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedEvaluation", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedEvaluation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[] EvaluationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[] Evaluations {
            get {
                return this.EvaluationsField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationsField, value) != true)) {
                    this.EvaluationsField = value;
                    this.RaisePropertyChanged("Evaluations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvaluationQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EvaluationQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EvaluationQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationQuestionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationID {
            get {
                return this.EvaluationIDField;
            }
            set {
                if ((this.EvaluationIDField.Equals(value) != true)) {
                    this.EvaluationIDField = value;
                    this.RaisePropertyChanged("EvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvaluationQues {
            get {
                return this.EvaluationQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationQuesField, value) != true)) {
                    this.EvaluationQuesField = value;
                    this.RaisePropertyChanged("EvaluationQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationQuestionID {
            get {
                return this.EvaluationQuestionIDField;
            }
            set {
                if ((this.EvaluationQuestionIDField.Equals(value) != true)) {
                    this.EvaluationQuestionIDField = value;
                    this.RaisePropertyChanged("EvaluationQuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStatus {
            get {
                return this.IsStatusField;
            }
            set {
                if ((this.IsStatusField.Equals(value) != true)) {
                    this.IsStatusField = value;
                    this.RaisePropertyChanged("IsStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedEvaluationQuestion", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedEvaluationQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion[] EvaluationQuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion[] EvaluationQuestions {
            get {
                return this.EvaluationQuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationQuestionsField, value) != true)) {
                    this.EvaluationQuestionsField = value;
                    this.RaisePropertyChanged("EvaluationQuestions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvaluationQuestionDetail", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EvaluationQuestionDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CourseEvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CourseNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EvaluationQuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationQuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CourseEvaluationID {
            get {
                return this.CourseEvaluationIDField;
            }
            set {
                if ((this.CourseEvaluationIDField.Equals(value) != true)) {
                    this.CourseEvaluationIDField = value;
                    this.RaisePropertyChanged("CourseEvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourseName {
            get {
                return this.CourseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseNameField, value) != true)) {
                    this.CourseNameField = value;
                    this.RaisePropertyChanged("CourseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationID {
            get {
                return this.EvaluationIDField;
            }
            set {
                if ((this.EvaluationIDField.Equals(value) != true)) {
                    this.EvaluationIDField = value;
                    this.RaisePropertyChanged("EvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvaluationQues {
            get {
                return this.EvaluationQuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EvaluationQuesField, value) != true)) {
                    this.EvaluationQuesField = value;
                    this.RaisePropertyChanged("EvaluationQues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationQuestionID {
            get {
                return this.EvaluationQuestionIDField;
            }
            set {
                if ((this.EvaluationQuestionIDField.Equals(value) != true)) {
                    this.EvaluationQuestionIDField = value;
                    this.RaisePropertyChanged("EvaluationQuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EducationEvaluation", Namespace="http://schemas.datacontract.org/2004/07/HCRGUniversityService.DTO")]
    [System.SerializableAttribute()]
    public partial class EducationEvaluation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CourseEvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EducationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EvaluationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CourseEvaluationID {
            get {
                return this.CourseEvaluationIDField;
            }
            set {
                if ((this.CourseEvaluationIDField.Equals(value) != true)) {
                    this.CourseEvaluationIDField = value;
                    this.RaisePropertyChanged("CourseEvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EducationID {
            get {
                return this.EducationIDField;
            }
            set {
                if ((this.EducationIDField.Equals(value) != true)) {
                    this.EducationIDField = value;
                    this.RaisePropertyChanged("EducationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EvaluationID {
            get {
                return this.EvaluationIDField;
            }
            set {
                if ((this.EvaluationIDField.Equals(value) != true)) {
                    this.EvaluationIDField = value;
                    this.RaisePropertyChanged("EvaluationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NEPService.ExamQuestionService.IExamQuestionService")]
    public interface IExamQuestionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddExamQuestionResponse")]
        int AddExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddExamQuestionResponse")]
        System.Threading.Tasks.Task<int> AddExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateExamQuestionResponse")]
        int UpdateExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateExamQuestionResponse")]
        System.Threading.Tasks.Task<int> UpdateExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteExamQuestionResponse")]
        void DeleteExamQuestion(int examQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteExamQuestionResponse")]
        System.Threading.Tasks.Task DeleteExamQuestionAsync(int examQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamQuestionByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion GetExamQuestionByID(int examQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamQuestionByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion> GetExamQuestionByIDAsync(int examQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedExamQuestionByExamID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedExamQuestionByExamIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExamQuestion GetAllPagedExamQuestionByExamID(int examID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedExamQuestionByExamID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedExamQuestionByExamIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExamQuestion> GetAllPagedExamQuestionByExamIDAsync(int examID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllExamQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllExamQuestionDetailByEIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestionDetail[] GetAllExamQuestionDetailByEID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllExamQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllExamQuestionDetailByEIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestionDetail[]> GetAllExamQuestionDetailByEIDAsync(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamQuestionWrongAnswered", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamQuestionWrongAnsweredResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[] GetExamQuestionWrongAnswered(int meID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamQuestionWrongAnswered", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamQuestionWrongAnsweredResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[]> GetExamQuestionWrongAnsweredAsync(int meID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddPreTestQuestionResponse")]
        int AddPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddPreTestQuestionResponse")]
        System.Threading.Tasks.Task<int> AddPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdatePreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdatePreTestQuestionResponse")]
        int UpdatePreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdatePreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdatePreTestQuestionResponse")]
        System.Threading.Tasks.Task<int> UpdatePreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeletePreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeletePreTestQuestionResponse")]
        void DeletePreTestQuestion(int preTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeletePreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeletePreTestQuestionResponse")]
        System.Threading.Tasks.Task DeletePreTestQuestionAsync(int preTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetPreTestQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetPreTestQuestionByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion GetPreTestQuestionByID(int preTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetPreTestQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetPreTestQuestionByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion> GetPreTestQuestionByIDAsync(int preTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestQuestionByPreTestID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestQuestionByPreTestIDResp" +
            "onse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTestQuestion GetAllPagedPreTestQuestionByPreTestID(int preTestID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestQuestionByPreTestID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestQuestionByPreTestIDResp" +
            "onse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTestQuestion> GetAllPagedPreTestQuestionByPreTestIDAsync(int preTestID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPreTestQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPreTestQuestionDetailByEIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestionDetail[] GetAllPreTestQuestionDetailByEID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPreTestQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPreTestQuestionDetailByEIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestionDetail[]> GetAllPreTestQuestionDetailByEIDAsync(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationExamQuestionResponse")]
        int AddEducationExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationExamQuestionResponse")]
        System.Threading.Tasks.Task<int> AddEducationExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationExamQuestionResponse")]
        void UpdateEducationExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationExamQuestionResponse")]
        System.Threading.Tasks.Task UpdateEducationExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationExamQuestionResponse")]
        void DeleteEducationExamQuestion(int courseExamQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationExamQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationExamQuestionResponse")]
        System.Threading.Tasks.Task DeleteEducationExamQuestionAsync(int courseExamQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationExamQuestionByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationExamQuestionByEducationIDResp" +
            "onse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion GetEducationExamQuestionByEducationID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationExamQuestionByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationExamQuestionByEducationIDResp" +
            "onse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion> GetEducationExamQuestionByEducationIDAsync(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationPreTestQuestionResponse")]
        int AddEducationPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationPreTestQuestionResponse")]
        System.Threading.Tasks.Task<int> AddEducationPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationPreTestQuestionResponse")]
        void UpdateEducationPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationPreTestQuestionResponse")]
        System.Threading.Tasks.Task UpdateEducationPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationPreTestQuestionResponse")]
        void DeleteEducationPreTestQuestion(int coursePreTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationPreTestQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationPreTestQuestionResponse")]
        System.Threading.Tasks.Task DeleteEducationPreTestQuestionAsync(int coursePreTestQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationPreTestQuestionByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationPreTestQuestionByEducationIDR" +
            "esponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion GetEducationPreTestQuestionByEducationID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationPreTestQuestionByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationPreTestQuestionByEducationIDR" +
            "esponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion> GetEducationPreTestQuestionByEducationIDAsync(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddExam", ReplyAction="http://tempuri.org/IExamQuestionService/AddExamResponse")]
        int AddExam(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddExam", ReplyAction="http://tempuri.org/IExamQuestionService/AddExamResponse")]
        System.Threading.Tasks.Task<int> AddExamAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateExam", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateExamResponse")]
        int UpdateExam(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateExam", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateExamResponse")]
        System.Threading.Tasks.Task<int> UpdateExamAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteExam", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteExamResponse")]
        void DeleteExam(int examID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteExam", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteExamResponse")]
        System.Threading.Tasks.Task DeleteExamAsync(int examID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam GetExamByID(int examID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetExamByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetExamByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam> GetExamByIDAsync(int examID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedExam", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedExamResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExam GetAllPagedExam(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedExam", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedExamResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExam> GetAllPagedExamAsync(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActiveExam", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActiveExamResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[] GetAllActiveExam(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActiveExam", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActiveExamResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[]> GetAllActiveExamAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddPreTest", ReplyAction="http://tempuri.org/IExamQuestionService/AddPreTestResponse")]
        int AddPreTest(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddPreTest", ReplyAction="http://tempuri.org/IExamQuestionService/AddPreTestResponse")]
        System.Threading.Tasks.Task<int> AddPreTestAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdatePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/UpdatePreTestResponse")]
        int UpdatePreTest(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdatePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/UpdatePreTestResponse")]
        System.Threading.Tasks.Task<int> UpdatePreTestAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeletePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/DeletePreTestResponse")]
        void DeletePreTest(int preTestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeletePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/DeletePreTestResponse")]
        System.Threading.Tasks.Task DeletePreTestAsync(int preTestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetPreTestByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetPreTestByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest GetPreTestByID(int preTestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetPreTestByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetPreTestByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest> GetPreTestByIDAsync(int preTestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedPreTest", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTest GetAllPagedPreTest(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedPreTest", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedPreTestResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTest> GetAllPagedPreTestAsync(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActivePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActivePreTestResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[] GetAllActivePreTest(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActivePreTest", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActivePreTestResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[]> GetAllActivePreTestAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationResponse")]
        int AddEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationResponse")]
        System.Threading.Tasks.Task<int> AddEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationResponse")]
        int UpdateEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationStatus", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationStatusResponse")]
        int UpdateEvaluationStatus(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationStatus", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationStatusResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationStatusAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEvaluationResponse")]
        void DeleteEvaluation(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEvaluationResponse")]
        System.Threading.Tasks.Task DeleteEvaluationAsync(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEvaluationByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEvaluationByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation GetEvaluationByID(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEvaluationByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEvaluationByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation> GetEvaluationByIDAsync(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluation GetAllPagedEvaluation(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluation> GetAllPagedEvaluationAsync(string name, int skip, int take, int ClientID, int orgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActiveEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActiveEvaluationResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[] GetAllActiveEvaluation(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllActiveEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllActiveEvaluationResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[]> GetAllActiveEvaluationAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionResponse")]
        int AddEvaluationQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionResponse")]
        System.Threading.Tasks.Task<int> AddEvaluationQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionsFromEvaluationPrede" +
            "finedQuestions", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionsFromEvaluationPrede" +
            "finedQuestionsResponse")]
        int AddEvaluationQuestionsFromEvaluationPredefinedQuestions(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionsFromEvaluationPrede" +
            "finedQuestions", ReplyAction="http://tempuri.org/IExamQuestionService/AddEvaluationQuestionsFromEvaluationPrede" +
            "finedQuestionsResponse")]
        System.Threading.Tasks.Task<int> AddEvaluationQuestionsFromEvaluationPredefinedQuestionsAsync(int EvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionResponse")]
        int UpdateEvaluationQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionStatus", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionStatusResponse")]
        int UpdateEvaluationQuestionStatus(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionStatus", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEvaluationQuestionStatusResponse")]
        System.Threading.Tasks.Task<int> UpdateEvaluationQuestionStatusAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEvaluationQuestionResponse")]
        void DeleteEvaluationQuestion(int EvaluationQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEvaluationQuestion", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEvaluationQuestionResponse")]
        System.Threading.Tasks.Task DeleteEvaluationQuestionAsync(int EvaluationQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEvaluationQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEvaluationQuestionByIDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion GetEvaluationQuestionByID(int EvaluationQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEvaluationQuestionByID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEvaluationQuestionByIDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion> GetEvaluationQuestionByIDAsync(int EvaluationQuestionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationQuestionByEvaluation" +
            "ID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationQuestionByEvaluation" +
            "IDResponse")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluationQuestion GetAllPagedEvaluationQuestionByEvaluationID(int EvaluationID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationQuestionByEvaluation" +
            "ID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllPagedEvaluationQuestionByEvaluation" +
            "IDResponse")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluationQuestion> GetAllPagedEvaluationQuestionByEvaluationIDAsync(int EvaluationID, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllEvaluationQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllEvaluationQuestionDetailByEIDRespon" +
            "se")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestionDetail[] GetAllEvaluationQuestionDetailByEID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetAllEvaluationQuestionDetailByEID", ReplyAction="http://tempuri.org/IExamQuestionService/GetAllEvaluationQuestionDetailByEIDRespon" +
            "se")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestionDetail[]> GetAllEvaluationQuestionDetailByEIDAsync(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationEvaluationResponse")]
        int AddEducationEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/AddEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/AddEducationEvaluationResponse")]
        System.Threading.Tasks.Task<int> AddEducationEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationEvaluationResponse")]
        void UpdateEducationEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/UpdateEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/UpdateEducationEvaluationResponse")]
        System.Threading.Tasks.Task UpdateEducationEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationEvaluationResponse")]
        void DeleteEducationEvaluation(int courseEvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/DeleteEducationEvaluation", ReplyAction="http://tempuri.org/IExamQuestionService/DeleteEducationEvaluationResponse")]
        System.Threading.Tasks.Task DeleteEducationEvaluationAsync(int courseEvaluationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationEvaluationByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationEvaluationByEducationIDRespon" +
            "se")]
        HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation GetEducationEvaluationByEducationID(int educationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExamQuestionService/GetEducationEvaluationByEducationID", ReplyAction="http://tempuri.org/IExamQuestionService/GetEducationEvaluationByEducationIDRespon" +
            "se")]
        System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation> GetEducationEvaluationByEducationIDAsync(int educationID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExamQuestionServiceChannel : HCRGUniversityMgtApp.NEPService.ExamQuestionService.IExamQuestionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExamQuestionServiceClient : System.ServiceModel.ClientBase<HCRGUniversityMgtApp.NEPService.ExamQuestionService.IExamQuestionService>, HCRGUniversityMgtApp.NEPService.ExamQuestionService.IExamQuestionService {
        
        public ExamQuestionServiceClient() {
        }
        
        public ExamQuestionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExamQuestionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExamQuestionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExamQuestionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion) {
            return base.Channel.AddExamQuestion(examQuestion);
        }
        
        public System.Threading.Tasks.Task<int> AddExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion) {
            return base.Channel.AddExamQuestionAsync(examQuestion);
        }
        
        public int UpdateExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion) {
            return base.Channel.UpdateExamQuestion(examQuestion);
        }
        
        public System.Threading.Tasks.Task<int> UpdateExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion examQuestion) {
            return base.Channel.UpdateExamQuestionAsync(examQuestion);
        }
        
        public void DeleteExamQuestion(int examQuestionID) {
            base.Channel.DeleteExamQuestion(examQuestionID);
        }
        
        public System.Threading.Tasks.Task DeleteExamQuestionAsync(int examQuestionID) {
            return base.Channel.DeleteExamQuestionAsync(examQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion GetExamQuestionByID(int examQuestionID) {
            return base.Channel.GetExamQuestionByID(examQuestionID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion> GetExamQuestionByIDAsync(int examQuestionID) {
            return base.Channel.GetExamQuestionByIDAsync(examQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExamQuestion GetAllPagedExamQuestionByExamID(int examID, int skip, int take) {
            return base.Channel.GetAllPagedExamQuestionByExamID(examID, skip, take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExamQuestion> GetAllPagedExamQuestionByExamIDAsync(int examID, int skip, int take) {
            return base.Channel.GetAllPagedExamQuestionByExamIDAsync(examID, skip, take);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestionDetail[] GetAllExamQuestionDetailByEID(int educationID) {
            return base.Channel.GetAllExamQuestionDetailByEID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestionDetail[]> GetAllExamQuestionDetailByEIDAsync(int educationID) {
            return base.Channel.GetAllExamQuestionDetailByEIDAsync(educationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[] GetExamQuestionWrongAnswered(int meID) {
            return base.Channel.GetExamQuestionWrongAnswered(meID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.ExamQuestion[]> GetExamQuestionWrongAnsweredAsync(int meID) {
            return base.Channel.GetExamQuestionWrongAnsweredAsync(meID);
        }
        
        public int AddPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion) {
            return base.Channel.AddPreTestQuestion(preTestQuestion);
        }
        
        public System.Threading.Tasks.Task<int> AddPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion) {
            return base.Channel.AddPreTestQuestionAsync(preTestQuestion);
        }
        
        public int UpdatePreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion) {
            return base.Channel.UpdatePreTestQuestion(preTestQuestion);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion preTestQuestion) {
            return base.Channel.UpdatePreTestQuestionAsync(preTestQuestion);
        }
        
        public void DeletePreTestQuestion(int preTestQuestionID) {
            base.Channel.DeletePreTestQuestion(preTestQuestionID);
        }
        
        public System.Threading.Tasks.Task DeletePreTestQuestionAsync(int preTestQuestionID) {
            return base.Channel.DeletePreTestQuestionAsync(preTestQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion GetPreTestQuestionByID(int preTestQuestionID) {
            return base.Channel.GetPreTestQuestionByID(preTestQuestionID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestion> GetPreTestQuestionByIDAsync(int preTestQuestionID) {
            return base.Channel.GetPreTestQuestionByIDAsync(preTestQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTestQuestion GetAllPagedPreTestQuestionByPreTestID(int preTestID, int skip, int take) {
            return base.Channel.GetAllPagedPreTestQuestionByPreTestID(preTestID, skip, take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTestQuestion> GetAllPagedPreTestQuestionByPreTestIDAsync(int preTestID, int skip, int take) {
            return base.Channel.GetAllPagedPreTestQuestionByPreTestIDAsync(preTestID, skip, take);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestionDetail[] GetAllPreTestQuestionDetailByEID(int educationID) {
            return base.Channel.GetAllPreTestQuestionDetailByEID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTestQuestionDetail[]> GetAllPreTestQuestionDetailByEIDAsync(int educationID) {
            return base.Channel.GetAllPreTestQuestionDetailByEIDAsync(educationID);
        }
        
        public int AddEducationExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion) {
            return base.Channel.AddEducationExamQuestion(educationExamQuestion);
        }
        
        public System.Threading.Tasks.Task<int> AddEducationExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion) {
            return base.Channel.AddEducationExamQuestionAsync(educationExamQuestion);
        }
        
        public void UpdateEducationExamQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion) {
            base.Channel.UpdateEducationExamQuestion(educationExamQuestion);
        }
        
        public System.Threading.Tasks.Task UpdateEducationExamQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion educationExamQuestion) {
            return base.Channel.UpdateEducationExamQuestionAsync(educationExamQuestion);
        }
        
        public void DeleteEducationExamQuestion(int courseExamQuestionID) {
            base.Channel.DeleteEducationExamQuestion(courseExamQuestionID);
        }
        
        public System.Threading.Tasks.Task DeleteEducationExamQuestionAsync(int courseExamQuestionID) {
            return base.Channel.DeleteEducationExamQuestionAsync(courseExamQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion GetEducationExamQuestionByEducationID(int educationID) {
            return base.Channel.GetEducationExamQuestionByEducationID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationExamQuestion> GetEducationExamQuestionByEducationIDAsync(int educationID) {
            return base.Channel.GetEducationExamQuestionByEducationIDAsync(educationID);
        }
        
        public int AddEducationPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions) {
            return base.Channel.AddEducationPreTestQuestion(educationPreTestQuestions);
        }
        
        public System.Threading.Tasks.Task<int> AddEducationPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions) {
            return base.Channel.AddEducationPreTestQuestionAsync(educationPreTestQuestions);
        }
        
        public void UpdateEducationPreTestQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions) {
            base.Channel.UpdateEducationPreTestQuestion(educationPreTestQuestions);
        }
        
        public System.Threading.Tasks.Task UpdateEducationPreTestQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion educationPreTestQuestions) {
            return base.Channel.UpdateEducationPreTestQuestionAsync(educationPreTestQuestions);
        }
        
        public void DeleteEducationPreTestQuestion(int coursePreTestQuestionID) {
            base.Channel.DeleteEducationPreTestQuestion(coursePreTestQuestionID);
        }
        
        public System.Threading.Tasks.Task DeleteEducationPreTestQuestionAsync(int coursePreTestQuestionID) {
            return base.Channel.DeleteEducationPreTestQuestionAsync(coursePreTestQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion GetEducationPreTestQuestionByEducationID(int educationID) {
            return base.Channel.GetEducationPreTestQuestionByEducationID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationPreTestQuestion> GetEducationPreTestQuestionByEducationIDAsync(int educationID) {
            return base.Channel.GetEducationPreTestQuestionByEducationIDAsync(educationID);
        }
        
        public int AddExam(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam) {
            return base.Channel.AddExam(exam);
        }
        
        public System.Threading.Tasks.Task<int> AddExamAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam) {
            return base.Channel.AddExamAsync(exam);
        }
        
        public int UpdateExam(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam) {
            return base.Channel.UpdateExam(exam);
        }
        
        public System.Threading.Tasks.Task<int> UpdateExamAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam exam) {
            return base.Channel.UpdateExamAsync(exam);
        }
        
        public void DeleteExam(int examID) {
            base.Channel.DeleteExam(examID);
        }
        
        public System.Threading.Tasks.Task DeleteExamAsync(int examID) {
            return base.Channel.DeleteExamAsync(examID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam GetExamByID(int examID) {
            return base.Channel.GetExamByID(examID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam> GetExamByIDAsync(int examID) {
            return base.Channel.GetExamByIDAsync(examID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExam GetAllPagedExam(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedExam(name, skip, take, ClientID, orgID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedExam> GetAllPagedExamAsync(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedExamAsync(name, skip, take, ClientID, orgID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[] GetAllActiveExam(int clientID) {
            return base.Channel.GetAllActiveExam(clientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Exam[]> GetAllActiveExamAsync(int clientID) {
            return base.Channel.GetAllActiveExamAsync(clientID);
        }
        
        public int AddPreTest(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest) {
            return base.Channel.AddPreTest(preTest);
        }
        
        public System.Threading.Tasks.Task<int> AddPreTestAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest) {
            return base.Channel.AddPreTestAsync(preTest);
        }
        
        public int UpdatePreTest(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest) {
            return base.Channel.UpdatePreTest(preTest);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePreTestAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest preTest) {
            return base.Channel.UpdatePreTestAsync(preTest);
        }
        
        public void DeletePreTest(int preTestID) {
            base.Channel.DeletePreTest(preTestID);
        }
        
        public System.Threading.Tasks.Task DeletePreTestAsync(int preTestID) {
            return base.Channel.DeletePreTestAsync(preTestID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest GetPreTestByID(int preTestID) {
            return base.Channel.GetPreTestByID(preTestID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest> GetPreTestByIDAsync(int preTestID) {
            return base.Channel.GetPreTestByIDAsync(preTestID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTest GetAllPagedPreTest(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedPreTest(name, skip, take, ClientID, orgID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedPreTest> GetAllPagedPreTestAsync(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedPreTestAsync(name, skip, take, ClientID, orgID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[] GetAllActivePreTest(int clientID) {
            return base.Channel.GetAllActivePreTest(clientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PreTest[]> GetAllActivePreTestAsync(int clientID) {
            return base.Channel.GetAllActivePreTestAsync(clientID);
        }
        
        public int AddEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.AddEvaluation(Evaluation);
        }
        
        public System.Threading.Tasks.Task<int> AddEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.AddEvaluationAsync(Evaluation);
        }
        
        public int UpdateEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.UpdateEvaluation(Evaluation);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.UpdateEvaluationAsync(Evaluation);
        }
        
        public int UpdateEvaluationStatus(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.UpdateEvaluationStatus(Evaluation);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationStatusAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation Evaluation) {
            return base.Channel.UpdateEvaluationStatusAsync(Evaluation);
        }
        
        public void DeleteEvaluation(int EvaluationID) {
            base.Channel.DeleteEvaluation(EvaluationID);
        }
        
        public System.Threading.Tasks.Task DeleteEvaluationAsync(int EvaluationID) {
            return base.Channel.DeleteEvaluationAsync(EvaluationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation GetEvaluationByID(int EvaluationID) {
            return base.Channel.GetEvaluationByID(EvaluationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation> GetEvaluationByIDAsync(int EvaluationID) {
            return base.Channel.GetEvaluationByIDAsync(EvaluationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluation GetAllPagedEvaluation(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedEvaluation(name, skip, take, ClientID, orgID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluation> GetAllPagedEvaluationAsync(string name, int skip, int take, int ClientID, int orgID) {
            return base.Channel.GetAllPagedEvaluationAsync(name, skip, take, ClientID, orgID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[] GetAllActiveEvaluation(int clientID) {
            return base.Channel.GetAllActiveEvaluation(clientID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.Evaluation[]> GetAllActiveEvaluationAsync(int clientID) {
            return base.Channel.GetAllActiveEvaluationAsync(clientID);
        }
        
        public int AddEvaluationQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.AddEvaluationQuestion(EvaluationQuestion);
        }
        
        public System.Threading.Tasks.Task<int> AddEvaluationQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.AddEvaluationQuestionAsync(EvaluationQuestion);
        }
        
        public int AddEvaluationQuestionsFromEvaluationPredefinedQuestions(int EvaluationID) {
            return base.Channel.AddEvaluationQuestionsFromEvaluationPredefinedQuestions(EvaluationID);
        }
        
        public System.Threading.Tasks.Task<int> AddEvaluationQuestionsFromEvaluationPredefinedQuestionsAsync(int EvaluationID) {
            return base.Channel.AddEvaluationQuestionsFromEvaluationPredefinedQuestionsAsync(EvaluationID);
        }
        
        public int UpdateEvaluationQuestion(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.UpdateEvaluationQuestion(EvaluationQuestion);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationQuestionAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.UpdateEvaluationQuestionAsync(EvaluationQuestion);
        }
        
        public int UpdateEvaluationQuestionStatus(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.UpdateEvaluationQuestionStatus(EvaluationQuestion);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEvaluationQuestionStatusAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion EvaluationQuestion) {
            return base.Channel.UpdateEvaluationQuestionStatusAsync(EvaluationQuestion);
        }
        
        public void DeleteEvaluationQuestion(int EvaluationQuestionID) {
            base.Channel.DeleteEvaluationQuestion(EvaluationQuestionID);
        }
        
        public System.Threading.Tasks.Task DeleteEvaluationQuestionAsync(int EvaluationQuestionID) {
            return base.Channel.DeleteEvaluationQuestionAsync(EvaluationQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion GetEvaluationQuestionByID(int EvaluationQuestionID) {
            return base.Channel.GetEvaluationQuestionByID(EvaluationQuestionID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestion> GetEvaluationQuestionByIDAsync(int EvaluationQuestionID) {
            return base.Channel.GetEvaluationQuestionByIDAsync(EvaluationQuestionID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluationQuestion GetAllPagedEvaluationQuestionByEvaluationID(int EvaluationID, int skip, int take) {
            return base.Channel.GetAllPagedEvaluationQuestionByEvaluationID(EvaluationID, skip, take);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.PagedEvaluationQuestion> GetAllPagedEvaluationQuestionByEvaluationIDAsync(int EvaluationID, int skip, int take) {
            return base.Channel.GetAllPagedEvaluationQuestionByEvaluationIDAsync(EvaluationID, skip, take);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestionDetail[] GetAllEvaluationQuestionDetailByEID(int educationID) {
            return base.Channel.GetAllEvaluationQuestionDetailByEID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EvaluationQuestionDetail[]> GetAllEvaluationQuestionDetailByEIDAsync(int educationID) {
            return base.Channel.GetAllEvaluationQuestionDetailByEIDAsync(educationID);
        }
        
        public int AddEducationEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation) {
            return base.Channel.AddEducationEvaluation(educationEvaluation);
        }
        
        public System.Threading.Tasks.Task<int> AddEducationEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation) {
            return base.Channel.AddEducationEvaluationAsync(educationEvaluation);
        }
        
        public void UpdateEducationEvaluation(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation) {
            base.Channel.UpdateEducationEvaluation(educationEvaluation);
        }
        
        public System.Threading.Tasks.Task UpdateEducationEvaluationAsync(HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation educationEvaluation) {
            return base.Channel.UpdateEducationEvaluationAsync(educationEvaluation);
        }
        
        public void DeleteEducationEvaluation(int courseEvaluationID) {
            base.Channel.DeleteEducationEvaluation(courseEvaluationID);
        }
        
        public System.Threading.Tasks.Task DeleteEducationEvaluationAsync(int courseEvaluationID) {
            return base.Channel.DeleteEducationEvaluationAsync(courseEvaluationID);
        }
        
        public HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation GetEducationEvaluationByEducationID(int educationID) {
            return base.Channel.GetEducationEvaluationByEducationID(educationID);
        }
        
        public System.Threading.Tasks.Task<HCRGUniversityMgtApp.NEPService.ExamQuestionService.EducationEvaluation> GetEducationEvaluationByEducationIDAsync(int educationID) {
            return base.Channel.GetEducationEvaluationByEducationIDAsync(educationID);
        }
    }
}
